package org.knoesis.rdf.sp.parser;

import java.io.BufferedWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.riot.lang.PipedRDFIterator;
import org.apache.jena.riot.lang.PipedRDFStream;
import org.apache.jena.riot.lang.PipedTriplesStream;
import org.apache.log4j.Logger;
import org.knoesis.rdf.sp.converter.ContextualRepresentationConverter;

public class TripleParser implements Parser {
	
	final static Logger logger = Logger.getLogger(TripleParser.class);

    PipedRDFIterator<org.apache.jena.graph.Triple> iter = null;
    PipedRDFStream<org.apache.jena.graph.Triple> inputStream = null;

	public TripleParser(){
        iter = new PipedRDFIterator<org.apache.jena.graph.Triple>();
        inputStream = new PipedTriplesStream(iter);
	}
	
	public boolean hasNext(){
		
		return this.iter.hasNext();
		
	}

	@Override
	public void parse(ContextualRepresentationConverter con, String in,
			String out, String ext) {
		// PipedRDFStream and PipedRDFIterator need to be on different threads
		ExecutorService executor = Executors.newSingleThreadExecutor();

		// Create a runnable for our parser thread
		Runnable parser = new Runnable() {

			@Override
			public void run() {
				// Call the parsing process.
				RDFDataMgr.parse(inputStream, in, null);
			}
		};

		// Start the parser on another thread
		executor.submit(parser);
        ExecutorService executor2 = Executors.newWorkStealingPool();
        Runnable transformer = new Runnable(){
        	@Override
        	public void run(){
        		BufferedWriter writer = con.getBufferedWriter(out + Thread.currentThread().getId());
				// Write the credentials
				String cred = "# This file is generated by SP-Conversion.\n";
				try {
					writer.write(cred);
					org.apache.jena.graph.Triple triple;
		       		while (iter.hasNext()) {
		       			triple = iter.next();
	        			con.transformTriple(writer, triple, ext, con.isInfer(), con.getInference());
	        		}
					writer.close();
 				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
       };
       executor2.submit(transformer);

//		iter.close();
//		inputStream.finish();
		executor.shutdown();
		executor2.shutdown();

	}

}
