package org.knoesis.rdf.sp.parser;


import java.io.BufferedWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.jena.graph.Node;
import org.apache.jena.riot.Lang;
import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.riot.lang.PipedQuadsStream;
import org.apache.jena.riot.lang.PipedRDFIterator;
import org.apache.jena.riot.lang.PipedRDFStream;
import org.apache.jena.sparql.core.Quad;
import org.apache.log4j.Logger;
import org.knoesis.rdf.sp.converter.ContextualRepresentationConverter;

public class QuadParser implements Parser{
	
	final static Logger logger = Logger.getLogger(QuadParser.class);


	protected PipedRDFIterator<Quad> iter;
	protected PipedRDFStream<Quad> inputStream;
	
	public QuadParser(){
		
	}
	
	
	public Node[] next(){
		Quad quad = (Quad) this.iter.next();
		return new Node[] {quad.getSubject(), quad.getPredicate(), quad.getObject(), quad.getGraph()};
	}
	
	public boolean hasNext(){
		return this.iter.hasNext();
	}

	@Override
	public void parse(ContextualRepresentationConverter con, String in, String out, String ext) {
        iter = new PipedRDFIterator<Quad>();
        inputStream = new PipedQuadsStream(iter);
        // PipedRDFStream and PipedRDFIterator need to be on different threads
        ExecutorService executor1 = Executors.newSingleThreadExecutor();

        // Create a runnable for our parser thread
        Runnable parser = new Runnable() {

            @Override
            public void run() {
                // Call the parsing process.
                RDFDataMgr.parse(inputStream, in, Lang.NQUADS);
            }
        };

        // Start the parser on another thread
        executor1.submit(parser);
//        AtomicInteger atomicInt = new AtomicInteger(0);

        ExecutorService executor2 = Executors.newFixedThreadPool(2);
        Runnable transformer = new Runnable(){
        	@Override
        	public void run(){
//        		int num = atomicInt.updateAndGet(n -> n + 1);
        		BufferedWriter writer = con.getBufferedWriter(out);
				// Write the credentials
				String cred = "# This file is generated by SP-Conversion.\n";
				try {
					writer.write(cred);
		       		while (iter.hasNext()) {
	        		    Quad quad = iter.next();
	        			con.transformQuad(writer, quad, ext, con.isInfer(), con.getInference());
	        		}
					writer.close();
 				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
        };
        executor2.submit(transformer);
	}
}
